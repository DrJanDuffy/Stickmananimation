var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
  insertSubscriberSchema: () => insertSubscriberSchema,
  insertUserSchema: () => insertUserSchema,
  insertVideoSchema: () => insertVideoSchema,
  subscribers: () => subscribers,
  users: () => users,
  videos: () => videos
});
import { pgTable, text, serial, integer, boolean, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var subscribers = pgTable("subscribers", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  consentGiven: boolean("consent_given").notNull().default(true),
  createdAt: timestamp("created_at").defaultNow().notNull()
});
var insertSubscriberSchema = createInsertSchema(subscribers).pick({
  name: true,
  email: true,
  consentGiven: true
});
var videos = pgTable("videos", {
  id: serial("id").primaryKey(),
  videoId: text("video_id").notNull().unique(),
  title: text("title").notNull(),
  description: text("description"),
  thumbnailUrl: text("thumbnail_url").notNull(),
  category: text("category").notNull(),
  duration: text("duration").notNull(),
  viewCount: integer("view_count").default(0),
  featured: boolean("featured").default(false),
  showreel: boolean("showreel").default(false),
  publishedAt: timestamp("published_at").notNull()
});
var insertVideoSchema = createInsertSchema(videos).pick({
  videoId: true,
  title: true,
  description: true,
  thumbnailUrl: true,
  category: true,
  duration: true,
  viewCount: true,
  featured: true,
  showreel: true,
  publishedAt: true
});
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true
});

// server/db.ts
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
var connectionString = process.env.DATABASE_URL;
var client = postgres(connectionString);
var db = drizzle(client, { schema: schema_exports });

// server/storage.ts
import { eq, desc } from "drizzle-orm";
var DatabaseStorage = class {
  // User methods
  async getUser(id) {
    const result = await db.select().from(users).where(eq(users.id, id));
    return result[0];
  }
  async getUserByUsername(username) {
    const result = await db.select().from(users).where(eq(users.username, username));
    return result[0];
  }
  async createUser(insertUser) {
    const result = await db.insert(users).values(insertUser).returning();
    return result[0];
  }
  // Newsletter Subscriber methods
  async getSubscriberByEmail(email) {
    const result = await db.select().from(subscribers).where(eq(subscribers.email, email));
    return result[0];
  }
  async createSubscriber(insertSubscriber) {
    const result = await db.insert(subscribers).values({
      ...insertSubscriber,
      createdAt: /* @__PURE__ */ new Date()
    }).returning();
    return result[0];
  }
  async getAllSubscribers() {
    return await db.select().from(subscribers).orderBy(desc(subscribers.createdAt));
  }
  // YouTube Video methods
  async getShowreel() {
    const latestVideo = await db.select().from(videos).orderBy(desc(videos.publishedAt)).limit(1);
    if (latestVideo.length > 0) {
      return latestVideo[0];
    }
    const anyResult = await db.select().from(videos).limit(1);
    return anyResult[0];
  }
  async getFeaturedVideos() {
    const longestVideo = await this.getLongestVideo();
    const allVideos = await db.select().from(videos).orderBy(desc(videos.viewCount));
    const filteredVideos = longestVideo ? allVideos.filter((v) => v.id !== longestVideo.id) : allVideos;
    const topVideos = filteredVideos.slice(0, 12);
    for (const video of allVideos) {
      const shouldBeFeature = topVideos.some((tv) => tv.id === video.id);
      if (shouldBeFeature !== video.featured) {
        await db.update(videos).set({ featured: shouldBeFeature }).where(eq(videos.id, video.id));
      }
    }
    if (longestVideo) {
      await db.update(videos).set({ featured: false }).where(eq(videos.id, longestVideo.id));
    }
    return topVideos;
  }
  async getAllVideos() {
    return await db.select().from(videos).orderBy(desc(videos.publishedAt));
  }
  async getVideosByCategory(category) {
    if (category === "All") {
      return this.getAllVideos();
    }
    return await db.select().from(videos).where(eq(videos.category, category)).orderBy(desc(videos.publishedAt));
  }
  async getVideoById(id) {
    const result = await db.select().from(videos).where(eq(videos.id, id));
    return result[0];
  }
  async getVideoByYouTubeId(videoId) {
    const result = await db.select().from(videos).where(eq(videos.videoId, videoId));
    return result[0];
  }
  async getLongestVideo() {
    const allVideos = await this.getAllVideos();
    if (allVideos.length === 0) {
      return void 0;
    }
    const durationToSeconds = (duration) => {
      const parts = duration.split(":").map(Number);
      if (parts.length === 3) {
        return parts[0] * 3600 + parts[1] * 60 + parts[2];
      } else if (parts.length === 2) {
        return parts[0] * 60 + parts[1];
      } else {
        return 0;
      }
    };
    return allVideos.reduce((longest, current) => {
      const longestDuration = durationToSeconds(longest.duration);
      const currentDuration = durationToSeconds(current.duration);
      return currentDuration > longestDuration ? current : longest;
    }, allVideos[0]);
  }
  async createVideo(insertVideo) {
    const result = await db.insert(videos).values(insertVideo).returning();
    return result[0];
  }
  async updateVideo(id, videoUpdate) {
    const result = await db.update(videos).set(videoUpdate).where(eq(videos.id, id)).returning();
    return result[0];
  }
  // Helper method to initialize the database with sample videos if needed
  async initializeSampleVideos() {
    const existingVideos = await db.select().from(videos);
    if (existingVideos.length > 0) {
      console.log("Database already contains videos, skipping initialization");
      return;
    }
    console.log("Initializing database with sample videos");
    const sampleVideos = [
      {
        videoId: "dQw4w9WgXcQ",
        // Sample YouTube video
        title: "Character Animation Reel",
        description: "A showcase of expressive character animations across different styles",
        thumbnailUrl: "https://images.unsplash.com/photo-1550745165-9bc0b252726f",
        category: "Character",
        duration: "3:24",
        viewCount: 12500,
        featured: true,
        showreel: true,
        publishedAt: /* @__PURE__ */ new Date("2023-01-15")
      },
      {
        videoId: "UZKVt_RSU4M",
        // Sample YouTube video
        title: "Abstract Motion Graphics",
        description: "Experimental animation exploring shape, color and movement",
        thumbnailUrl: "https://images.unsplash.com/photo-1536440136628-849c177e76a1",
        category: "Motion Graphics",
        duration: "2:15",
        viewCount: 35e3,
        featured: true,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-02-20")
      },
      {
        videoId: "tPEE9ZwTmy0",
        // Sample YouTube video
        title: 'Short Film: "Connections"',
        description: "An award-winning animated short about human relationships",
        thumbnailUrl: "https://images.unsplash.com/photo-1516035071284-94981165aca1",
        category: "Short Films",
        duration: "4:52",
        viewCount: 28e3,
        featured: true,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-03-10")
      },
      {
        videoId: "NpEaa2P7qZI",
        // Sample YouTube video
        title: "Character Design Animation",
        description: "Creating and animating unique character designs",
        thumbnailUrl: "https://images.unsplash.com/photo-1551269901-5c5e14c25df7",
        category: "Character",
        duration: "1:45",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-04-05")
      },
      {
        videoId: "YE7VzlLtp-4",
        // Sample YouTube video
        title: "Logo Animation - Client Project",
        description: "Professional logo animation for a tech company",
        thumbnailUrl: "https://images.unsplash.com/photo-1642957565850-617bc5155673",
        category: "Commercial",
        duration: "0:30",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-05-12")
      },
      {
        videoId: "dKrS1RCsmbI",
        // Sample YouTube video
        title: "Fluid Simulation Experiment",
        description: "Testing advanced fluid dynamics in animation",
        thumbnailUrl: "https://images.unsplash.com/photo-1493711662062-fa541adb3fc8",
        category: "Experimental",
        duration: "2:12",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-06-18")
      },
      {
        videoId: "rf6uf3jNjao",
        // Sample YouTube video
        title: "Product Visualization",
        description: "3D product animation for marketing campaign",
        thumbnailUrl: "https://images.unsplash.com/photo-1620428268482-cf1851a383b0",
        category: "Commercial",
        duration: "1:20",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-07-23")
      },
      {
        videoId: "GBmoeaYk5J0",
        // Sample YouTube video
        title: "Abstract Data Visualization",
        description: "Turning complex data into beautiful motion graphics",
        thumbnailUrl: "https://images.unsplash.com/photo-1559028012-481c04fa702d",
        category: "Motion Graphics",
        duration: "3:05",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-08-14")
      },
      {
        videoId: "1La4QzGeaaQ",
        // Sample YouTube video
        title: "Character Walk Cycle Study",
        description: "Detailed animation of various walk cycles",
        thumbnailUrl: "https://images.unsplash.com/photo-1550745165-9bc0b252726f",
        category: "Character",
        duration: "0:45",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-09-02")
      },
      {
        videoId: "IUN664s7N-c",
        // Sample YouTube video
        title: '"The Journey" - Short Film',
        description: "Award-winning short about personal growth",
        thumbnailUrl: "https://images.unsplash.com/photo-1578632767115-351597cf2477",
        category: "Short Films",
        duration: "5:30",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-10-09")
      },
      {
        videoId: "ZHxGIPTuU9A",
        // Sample YouTube video
        title: "Particle System Demo",
        description: "Creating complex particle effects for animation",
        thumbnailUrl: "https://images.unsplash.com/photo-1519074069390-98277fc02a5f",
        category: "Experimental",
        duration: "1:35",
        featured: false,
        showreel: false,
        publishedAt: /* @__PURE__ */ new Date("2023-11-15")
      }
    ];
    await db.insert(videos).values(sampleVideos);
  }
};
var storage = new DatabaseStorage();
storage.initializeSampleVideos().catch((err) => {
  console.error("Error initializing sample videos:", err);
});

// server/routes.ts
import { fromZodError } from "zod-validation-error";
async function registerRoutes(app2) {
  app2.get("/api/videos/showreel", async (_req, res) => {
    try {
      const showreel = await storage.getShowreel();
      if (!showreel) {
        return res.status(404).json({ message: "Showreel not found" });
      }
      res.json({ videoId: showreel.videoId });
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch showreel" });
    }
  });
  app2.get("/api/videos/featured", async (_req, res) => {
    try {
      const featuredVideos = await storage.getFeaturedVideos();
      res.json(featuredVideos);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch featured videos" });
    }
  });
  app2.get("/api/videos/all", async (_req, res) => {
    try {
      const allVideos = await storage.getAllVideos();
      res.json(allVideos);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch all videos" });
    }
  });
  app2.get("/api/videos/category/:category", async (req, res) => {
    try {
      const category = req.params.category;
      const videos2 = await storage.getVideosByCategory(category);
      res.json(videos2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch videos by category" });
    }
  });
  app2.get("/api/videos/longest", async (_req, res) => {
    try {
      const longestVideo = await storage.getLongestVideo();
      if (!longestVideo) {
        return res.status(404).json({ message: "No videos found" });
      }
      res.json(longestVideo);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch longest video" });
    }
  });
  app2.get("/api/videos/:id([0-9]+)", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid video ID" });
      }
      const video = await storage.getVideoById(id);
      if (!video) {
        return res.status(404).json({ message: "Video not found" });
      }
      res.json(video);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch video" });
    }
  });
  app2.post("/api/newsletter/subscribe", async (req, res) => {
    try {
      const validatedData = insertSubscriberSchema.safeParse(req.body);
      if (!validatedData.success) {
        const validationError = fromZodError(validatedData.error);
        return res.status(400).json({ message: validationError.message });
      }
      const existingSubscriber = await storage.getSubscriberByEmail(validatedData.data.email);
      if (existingSubscriber) {
        return res.status(409).json({ message: "Email already subscribed" });
      }
      const newSubscriber = await storage.createSubscriber({
        name: validatedData.data.name,
        email: validatedData.data.email,
        consentGiven: validatedData.data.consentGiven ?? true
      });
      res.status(201).json(newSubscriber);
    } catch (error) {
      res.status(500).json({ message: "Failed to subscribe to newsletter" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    themePlugin(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/youtube-service.ts
import fetch from "node-fetch";
var YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;
var API_BASE_URL = "https://www.googleapis.com/youtube/v3";
var CHANNEL_ID = "UC_WllVNTkI50BEXRYkmVGRw";
var MAX_RESULTS = 50;
var CACHE_TTL = 1e3 * 60 * 60;
var videosCache = [];
var videoCacheTime = 0;
function formatDuration(isoDuration) {
  const match = isoDuration.match(/PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/);
  if (!match) return "00:00";
  const hours = parseInt(match[1] || "0");
  const minutes = parseInt(match[2] || "0");
  const seconds = parseInt(match[3] || "0");
  if (hours > 0) {
    return `${hours}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  }
  return `${minutes}:${seconds.toString().padStart(2, "0")}`;
}
async function fetchVideoCategories() {
  const categoryMap = /* @__PURE__ */ new Map();
  try {
    const response = await fetch(
      `${API_BASE_URL}/videoCategories?part=snippet&regionCode=US&key=${YOUTUBE_API_KEY}`
    );
    if (!response.ok) {
      console.error(`Error fetching video categories: ${response.status} ${response.statusText}`);
      return categoryMap;
    }
    const data = await response.json();
    for (const category of data.items) {
      categoryMap.set(category.id, category.snippet.title);
    }
  } catch (error) {
    console.error("Error fetching video categories:", error);
  }
  return categoryMap;
}
function mapCategoryName(categoryId, categoryMap) {
  const categoryName = categoryMap.get(categoryId) || "Uncategorized";
  switch (categoryName) {
    case "Film & Animation":
      return "Animation";
    case "Entertainment":
      return "Character";
    case "Howto & Style":
      return "Tutorial";
    case "Education":
      return "Tutorial";
    case "Science & Technology":
      return "Experimental";
    case "People & Blogs":
      return "Short Films";
    case "Gaming":
      return "Character";
    default:
      return "Motion Graphics";
  }
}
async function fetchAllChannelVideos() {
  const now = Date.now();
  if (videosCache.length > 0 && now - videoCacheTime < CACHE_TTL) {
    console.log("Using cached YouTube data");
    return videosCache;
  }
  console.log("Fetching YouTube channel videos...");
  try {
    const playlistResponse = await fetch(
      `${API_BASE_URL}/channels?part=contentDetails&id=${CHANNEL_ID}&key=${YOUTUBE_API_KEY}`
    );
    if (!playlistResponse.ok) {
      throw new Error(`Error fetching channel: ${playlistResponse.status} ${playlistResponse.statusText}`);
    }
    const channelData = await playlistResponse.json();
    const uploadsPlaylistId = channelData.items[0]?.contentDetails?.relatedPlaylists?.uploads;
    if (!uploadsPlaylistId) {
      throw new Error("Could not find uploads playlist ID");
    }
    const videosResponse = await fetch(
      `${API_BASE_URL}/playlistItems?part=snippet&maxResults=${MAX_RESULTS}&playlistId=${uploadsPlaylistId}&key=${YOUTUBE_API_KEY}`
    );
    if (!videosResponse.ok) {
      throw new Error(`Error fetching playlist items: ${videosResponse.status} ${videosResponse.statusText}`);
    }
    const playlistData = await videosResponse.json();
    const videoIds = playlistData.items.map((item) => item.snippet.resourceId.videoId).join(",");
    const detailsResponse = await fetch(
      `${API_BASE_URL}/videos?part=snippet,contentDetails,statistics&id=${videoIds}&key=${YOUTUBE_API_KEY}`
    );
    if (!detailsResponse.ok) {
      throw new Error(`Error fetching video details: ${detailsResponse.status} ${detailsResponse.statusText}`);
    }
    const videoData = await detailsResponse.json();
    const categories = await fetchVideoCategories();
    videosCache = videoData.items;
    videoCacheTime = now;
    return videoData.items;
  } catch (error) {
    console.error("Error fetching YouTube data:", error);
    return [];
  }
}
async function syncYouTubeVideos() {
  try {
    if (!YOUTUBE_API_KEY) {
      console.error("YOUTUBE_API_KEY environment variable is not set");
      return;
    }
    const existingVideosCheck = await storage.getAllVideos();
    if (existingVideosCheck.length > 0) {
      console.log("Database already contains videos, skipping initialization");
      return;
    }
    const videos2 = await fetchAllChannelVideos();
    const categories = await fetchVideoCategories();
    console.log(`Fetched ${videos2.length} videos from YouTube`);
    if (videos2.length === 0) {
      console.log("No videos found, skipping sync");
      return;
    }
    const existingVideos = await storage.getAllVideos();
    const existingVideoIds = new Set(existingVideos.map((video) => video.videoId));
    const BATCH_SIZE = 5;
    for (let i = 0; i < videos2.length; i += BATCH_SIZE) {
      const batch = videos2.slice(i, i + BATCH_SIZE);
      const promises = batch.map(async (video) => {
        try {
          const { id, snippet, contentDetails, statistics } = video;
          if (existingVideoIds.has(id)) {
            const existingVideo = existingVideos.find((v) => v.videoId === id);
            if (existingVideo) {
              await storage.updateVideo(existingVideo.id, {
                viewCount: parseInt(statistics.viewCount) || 0
              });
            }
            return;
          }
          const thumbnailUrl = snippet.thumbnails.maxres?.url || snippet.thumbnails.high.url;
          const category = mapCategoryName(snippet.categoryId, categories);
          const duration = formatDuration(contentDetails.duration);
          const videoToInsert = {
            videoId: id,
            title: snippet.title,
            description: snippet.description,
            thumbnailUrl,
            category,
            duration,
            viewCount: parseInt(statistics.viewCount) || 0,
            publishedAt: new Date(snippet.publishedAt),
            featured: false,
            // Default to not featured
            showreel: false
            // Default to not showreel
          };
          videoToInsert.featured = true;
          if (video === videos2[0]) {
            videoToInsert.showreel = true;
          }
          await storage.createVideo(videoToInsert);
          console.log(`Added video: ${snippet.title}`);
        } catch (err) {
          console.error(`Error processing video: ${err instanceof Error ? err.message : String(err)}`);
        }
      });
      await Promise.all(promises);
    }
    console.log("YouTube sync completed");
  } catch (error) {
    console.error(
      "Error syncing YouTube videos:",
      error instanceof Error ? `${error.name}: ${error.message}
${error.stack}` : String(error)
    );
    if (process.env.NODE_ENV !== "production") {
      throw error;
    }
  }
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = process.env.PORT || 5e3;
  const isServerless = process.env.VERCEL === "1";
  if (!isServerless) {
    server.listen({
      port: Number(port),
      host: "0.0.0.0"
    }).on("listening", () => {
      log(`Server successfully started on port ${port}`);
      syncYouTubeVideos().catch((err) => {
        console.error("Failed to sync YouTube videos:", err);
      });
    }).on("error", (err) => {
      log(`Error starting server: ${err.message}`);
      throw err;
    });
  } else {
    log(`Running in serverless mode`);
    if (process.env.SYNC_VIDEOS === "true") {
      syncYouTubeVideos().catch((err) => {
        console.error("Failed to sync YouTube videos:", err);
      });
    }
  }
})();